<?php

namespace Model\Cashbook;

use Cake\Chronos\Date;
use Model\Cashbook\Cashbook\Amount;
use Model\Cashbook\Cashbook\CashbookType;
use Model\Cashbook\Cashbook\Chit;
use Model\Cashbook\Cashbook\Recipient;
use Model\Cashbook\Events\ChitWasRemoved;
use Model\Cashbook\Events\ChitWasUpdated;

/**
 * These are in fact unit tests, that can't be tested without database right now, because chit ids are
 * autogenerated. This should be refactored to use composite keys ( @see \Model\Travel\Command ) and moved to unit suite
 */
class CashbookIntegrationTest extends \IntegrationTest
{

    public function getTestedEntites(): array
    {
        return [
            Cashbook::class,
            Chit::class,
        ];
    }

    public function testLockingLockedChitDoesNothing(): void
    {
        $cashbook = $this->createCashbookWithLockedChit();

        $cashbook->lockChit(1, 10);

        $this->assertEmpty($cashbook->extractEventsToDispatch());
    }

    public function testUnlockingUnlockedChitDoesNothing(): void
    {
        $cashbook = $this->createCashbookWithChit();

        $cashbook->unlockChit(1);

        $this->assertEmpty($cashbook->extractEventsToDispatch());
    }

    public function testUnlockedChitCanBeUpdated(): void
    {
        $cashbook = $this->createCashbookWithLockedChit();

        $cashbook->unlockChit(1);
        $cashbook->updateChit(1, NULL, new Date('2013-11-17'), new Recipient('František Maša'), new Amount('100'), 'purpose', 1);

        $event = $cashbook->extractEventsToDispatch()[0];
        $this->assertInstanceOf(ChitWasUpdated::class, $event);
        /** @var ChitWasUpdated $event */
        $this->assertSame(10, $event->getCashbookId());
        $this->assertSame(666, $event->getOldCategoryId());
        $this->assertSame(1, $event->getNewCategoryId());
    }

    public function testUpdateOfLockedChitThrowsException(): void
    {
        $cashbook = $this->createCashbookWithLockedChit();

        $this->expectException(ChitLockedException::class);

        $cashbook->updateChit(1, NULL, new Date('2017-11-17'), NULL, new Cashbook\Amount('100'), 'new-purpose', 666);
    }

    public function testUpdateofNonExistentChitThrowsException(): void
    {
        $cashbook = $this->createCashbookWithChit();

        $this->expectException(ChitNotFoundException::class);

        $cashbook->updateChit(2, NULL, new Date('2017-11-17'), NULL, new Cashbook\Amount('100'), 'new-purpose', 666);
    }

    public function testRemoveChit(): void
    {
        $cashbook = $this->createCashbookWithChit();

        $cashbook->removeChit(1);

        $this->assertSame([], $cashbook->getCategoryTotals()); // no chits => no categories

        $event = $cashbook->extractEventsToDispatch()[0];
        $this->assertInstanceOf(ChitWasRemoved::class, $event);
        /** @var ChitWasRemoved $event */
        $this->assertSame(10, $event->getCashbookId());
        $this->assertSame('purpose', $event->getChitPurpose());
    }

    public function testRemovalOfLockedChitThrowsException()
    {
        $cashbook = $this->createCashbookWithLockedChit();

        $this->expectException(ChitLockedException::class);

        $cashbook->removeChit(1);
    }

    public function testRemovalOfNonExistentChitThrowsException()
    {
        $cashbook = $this->createCashbookWithChit();

        $this->expectException(ChitNotFoundException::class);

        $cashbook->removeChit(2);
    }

    private function createCashbookWithLockedChit(): Cashbook
    {
        $cashbook = $this->createCashbookWithChit();
        $cashbook->lockChit(1, 10);
        $cashbook->extractEventsToDispatch();

        return $cashbook;
    }

    private function createCashbookWithChit(): Cashbook
    {
        $cashbook = new Cashbook(10, CashbookType::get(CashbookType::EVENT));
        $cashbook->addChit(NULL, new Date('2017-11-17'), NULL, new Cashbook\Amount('100'), 'purpose', 666);
        $cashbook->extractEventsToDispatch();

        // This assigns ID 1 to chit
        $this->entityManager->persist($cashbook);
        $this->entityManager->flush();

        return $cashbook;
    }

    public function testLock(): void
    {
        $cashbook = new Cashbook(11, CashbookType::get(CashbookType::EVENT));

        for ($i = 0; $i < 5; $i++) {
            $cashbook->addChit(
                NULL,
                new Date('2017-11-17'),
                NULL,
                new Cashbook\Amount('100'),
                'purpose',
                666
            );
        }

        $this->entityManager->persist($cashbook);
        $this->entityManager->flush();

        $cashbook->lockChit(3, 1);


        $cashbook->lock(1);

        $chits = $cashbook->getChits();

        $this->assertCount(5, $chits);
        foreach($chits as $chit) {
            $this->assertTrue($chit->isLocked());
        }
    }

}
